import rsassa_pss
import rpi_hash
import random

n = int("F305C80D00DDFDC9AF39709102FCD1A4BA81DE528E8AA72502637E92FE526779C5EBC37C2CA27F004E5759586B89562EE3E0E72B7E3F1780D2DB40E235BBA0F68562CDE32F58206AD6867779A5CA8AD100CEFE9917533B38D5253F9FCF8A6503DF6A4AC16E94F19FF64AE81A1B3D8D2E80D210FDA5FFD2A29B6E1D9BD48A817218A3F0278C137AE12980FE22B318D2AA4A757099A6028AD4F00FD105F4C78C1E78D10B19E8297CB70B0BA9DF47244DE8333443A67FCD341CFA19998EF49A51F65AB6F0DECD26C2992739FFD6B0355FB0559F173D245092CB6338ACE25D54E91DC3BE63EBCF052C02E7434A8578B3393FEBF636B52D0505F28DE5FC9BC8958603", 16)
e = int("010001", 16)
d = int("51153ABBEBF0253EE771B8B7095224F85B29FD6D7A1594D2EA4B1BEE1B608F19B809837DA8BEC6B4E96E8766D2EA4D90F383145E148F245E5CFBBE583B2950F92F63D9E1D4E80858DD1E9C3A4030A5C43A0AD63369EEE131831C1C704BA497338595473FE68F5756D1AC0868BD71F9EAEC1C2A8316A1963B9EB44CB8B35F4AF489FF254E1AAEC8D993A1FA92DB9FE437B5D24AF58819442B839D00A51581145679258B95B36C85253FABE3AF0D577097FF8D33CAE0CD39DE8CB844529C2B4055A9D34A8311AE9702F5FBCD4B4030D671B9B1B9B4D94685DDD7CAF55C06AD7F63169AB0E4471EB0350FAFB7656354105056045C9E4359BA5AFA235C9304D1C161", 16)
p = int("FE4064E8A243C6FB3F809591053771DB9B0707F8F327DE22526E3AB7484267175A7287537E36EAA44581971832D7BD37B4D9EA9A73E54F134085E5DD4254EE43A952D492D669CE16130DC8256B6F9F6F18A87DBFDFC87C03613EEE34F3A1B0A20237592BDE0ACF551A73D6328763F34072185EF2B27A5895C7AFF1309D4F2259", 16)
q = int("F4B19E6E84519DD62C5DAB5CFE0BB706FFACF722B63178DED392F9127EA5C39A0E54580B443F09D875361D0BC4966500C27A3F4A0B1BC675CDA265021F51654790DB2075E0017BD5A73052DD87994D1D6F38136E0347C6EE3FBC6214E28762E7B967ABDC0424D26A098A69CC2DC646403731E57F46E93559B9781D47B3AF07BB", 16)

assert (e * d) % ((p-1) * (q-1)) == 1
assert pow(pow(100, e, n), d, n) == 100
assert p * q == n

# Test EMSA
for i in range(10):
    msg = random.randbytes(random.randrange(1, 20))
    EM = rsassa_pss.EMSA_PSS_ENCODE(msg, 100, rpi_hash.SHA256)
    assert rsassa_pss.EMSA_PSS_VERIFY(msg, EM, rpi_hash.SHA256)

# Test RSASSA-PSS
for i in range(10):
    msg = random.randbytes(random.randrange(1, 20))
    S = rsassa_pss.RSASSA_PSS_SIGN(msg, d, n, rpi_hash.SHA256)
    assert rsassa_pss.RSASSA_PSS_VERIFY(msg, S, e, n, rpi_hash.SHA256)

# Test invalid RSASSA-PSS
# + Invalid length
for i in range(10):
    msg = random.randbytes(random.randrange(1, 20))
    S = rsassa_pss.RSASSA_PSS_SIGN(msg, d, n, rpi_hash.SHA256)
    S = S[:-1]
    assert not rsassa_pss.RSASSA_PSS_VERIFY(msg, S, e, n, rpi_hash.SHA256)
# + Empty signature
for i in range(10):
    msg = random.randbytes(random.randrange(1, 20))
    S = rsassa_pss.RSASSA_PSS_SIGN(msg, d, n, rpi_hash.SHA256)
    S = b""
    assert not rsassa_pss.RSASSA_PSS_VERIFY(msg, S, e, n, rpi_hash.SHA256)
# + Changed signature
for i in range(10):
    msg = random.randbytes(random.randrange(1, 20))
    S = rsassa_pss.RSASSA_PSS_SIGN(msg, d, n, rpi_hash.SHA256)
    S = S[:-1] + bytes([S[-1] ^ 0x01])
    assert not rsassa_pss.RSASSA_PSS_VERIFY(msg, S, e, n, rpi_hash.SHA256)